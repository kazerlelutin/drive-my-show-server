// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Profile {
  free
  premium
  all_star
}

model User {
  id              String   @id @default(uuid())
  twitch_id       String   @unique
  profile         Profile  @default(free)
  login           String
  channel         String
  token_profile   String?  @db.LongText
  updatedAt       DateTime @updatedAt
  current_channel String
  slider_token    String   @db.LongText

  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  shows           ShowOnUser[]
  UserOnChronicle UserOnChronicle[]
}

model Show {
  id          String  @id @default(uuid())
  name        String
  description String? @db.LongText
  director_ip String?

  users ShowOnUser[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model ShowOnUser {
  id String @id @default(uuid())

  user_id   String
  show_id   String
  users     User      @relation(fields: [user_id], references: [id])
  shows     Show      @relation(fields: [show_id], references: [id])
  role      ShowRoles
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now()) @db.Timestamp(6)
}

enum ShowRoles {
  owner
  editor
  director
  reader
}

model Chronicle {
  id      String  @id @default(uuid())
  title   String
  content String? @db.LongText

  tags TagOnChronicle[]

  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now()) @db.Timestamp(6)
  UserOnChronicle UserOnChronicle[]
}

enum ChronicleRoles {
  owner
  reader
  editor
}

model UserOnChronicle {
  id           String         @id @default(uuid())
  user_id      String
  chronicle_id String
  role         ChronicleRoles

  users     User      @relation(fields: [user_id], references: [id])
  chronicle Chronicle @relation(fields: [chronicle_id], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Tag {
  id                   String                     @id @default(uuid())
  name                 String
  description          String?                    @db.LongText
  updatedAt            DateTime                   @updatedAt
  createdAt            DateTime                   @default(now()) @db.Timestamp(6)
  chronicles           TagOnChronicle[]
  preSavedChatMessages TagOnPreSavedChatMessage[]
  medias               TagOnMedia[]
}

model TagOnChronicle {
  id          String    @id @default(uuid())
  Chronicle   Chronicle @relation(fields: [chronicleId], references: [id])
  chronicleId String
  Tag         Tag       @relation(fields: [tagId], references: [id])
  tagId       String
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
}

enum MediaTypes {
  image
  video
  audio
}

model Media {
  id          String       @id @default(uuid())
  name        String
  description String?      @db.LongText
  url         String
  type        MediaTypes
  updatedAt   DateTime     @updatedAt
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  tags        TagOnMedia[]
}

model TagOnMedia {
  id        String   @id @default(uuid())
  Media     Media    @relation(fields: [mediaId], references: [id])
  mediaId   String
  Tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model Metadata {
  id        String   @id @default(uuid())
  key       String
  value     String?  @db.LongText
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model MediaOnChronicle {
  id           String @id @default(uuid())
  chronicle_id String
  media_id     String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model MetadataOnMedia {
  id          String @id @default(uuid())
  media_id    String
  metadata_id String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)
}

model PreSavedChatMessage {
  id        String   @id @default(uuid())
  name      String
  message   String   @db.LongText
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now()) @db.Timestamp(6)

  tags TagOnPreSavedChatMessage[]
}

model TagOnPreSavedChatMessage {
  id                    String               @id @default(uuid())
  PreSavedChatMessage   PreSavedChatMessage? @relation(fields: [preSavedChatMessageId], references: [id])
  preSavedChatMessageId String
  Tag                   Tag?                 @relation(fields: [tagId], references: [id])
  tagId                 String
  updatedAt             DateTime             @updatedAt
  createdAt             DateTime             @default(now()) @db.Timestamp(6)
}
